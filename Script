
(function () {
  'use strict';

  let ctx = null;
  let master = null;
  const down = new Set();

  const MAX_SEG = 16;
  const MAX_GAIN = 3.0;
  let volume = MAX_GAIN;
  let segments = MAX_SEG;
  let hideTimer = null;

  let hud = null;
  let barsWrap = null;
  let percentLabel = null;
  let resetBtn = null;

  function ensureHUD() {
    if (hud) return;
    hud = document.createElement('div');
    hud.style.position = 'fixed';
    hud.style.right = '20px';
    hud.style.bottom = '20px';
    hud.style.background = 'rgba(30,30,30,0.85)';
    hud.style.color = '#fff';
    hud.style.padding = '14px 18px';
    hud.style.borderRadius = '16px';
    hud.style.display = 'flex';
    hud.style.flexDirection = 'column';
    hud.style.alignItems = 'center';
    hud.style.gap = '10px';
    hud.style.fontFamily = 'system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif';
    hud.style.zIndex = '999999';
    hud.style.opacity = '0';
    hud.style.transition = 'opacity 180ms ease';

    const icon = document.createElement('div');
    icon.textContent = 'Volume';
    icon.style.fontSize = '28px';
    icon.style.lineHeight = '1';
    hud.appendChild(icon);

    barsWrap = document.createElement('div');
    barsWrap.style.display = 'grid';
    barsWrap.style.gridTemplateColumns = `repeat(${MAX_SEG}, 10px)`;
    barsWrap.style.gap = '4px';
    barsWrap.style.alignItems = 'end';
    barsWrap.style.height = '18px';
    for (let i = 0; i < MAX_SEG; i++) {
      const b = document.createElement('div');
      b.style.width = '10px';
      b.style.height = '100%';
      b.style.borderRadius = '3px';
      b.style.background = 'rgba(255,255,255,0.25)';
      barsWrap.appendChild(b);
    }
    hud.appendChild(barsWrap);

    percentLabel = document.createElement('div');
    percentLabel.style.fontSize = '12px';
    percentLabel.style.opacity = '0.85';
    hud.appendChild(percentLabel);

    resetBtn = document.createElement('button');
    resetBtn.textContent = 'Reset';
    resetBtn.style.padding = '4px 8px';
    resetBtn.style.borderRadius = '8px';
    resetBtn.style.border = 'none';
    resetBtn.style.background = '#ff0077';
    resetBtn.style.color = '#fff';
    resetBtn.style.cursor = 'pointer';
    resetBtn.onclick = () => {
      segments = MAX_SEG;
      applyVolumeFromSegments();
      updateHUD();
      showHUD();
    };
    hud.appendChild(resetBtn);

    const attach = () => document.body.appendChild(hud);
    if (document.body) attach(); else window.addEventListener('DOMContentLoaded', attach);

    updateHUD();
  }

  function updateHUD() {
    if (!barsWrap) return;
    for (let i = 0; i < MAX_SEG; i++) {
      const b = barsWrap.children[i];
      const active = i < segments;
      b.style.background = active ? '#fff' : 'rgba(255,255,255,0.25)';
      const h = 6 + Math.round((i + 1) / MAX_SEG * 12);
      b.style.height = `${h}px`;
    }
    percentLabel.textContent = `Volume Of Sound: ${Math.round((segments / MAX_SEG) * 100)}%`;
  }

  function showHUD() {
    ensureHUD();
    hud.style.opacity = '1';
    clearTimeout(hideTimer);
    hideTimer = setTimeout(() => { hud.style.opacity = '0'; }, 1200);
  }

  function applyVolumeFromSegments() {
    volume = (segments / MAX_SEG) * MAX_GAIN;
    if (master) master.gain.value = volume;
  }

  function initAudio() {
    if (ctx) return;
    ctx = new (window.AudioContext || window.webkitAudioContext)();
    master = ctx.createGain();
    master.gain.value = volume;
    master.connect(ctx.destination);
  }

  function onKeyDown(e) {
    if (!ctx) initAudio();
    if (ctx && ctx.state === 'suspended') ctx.resume().catch(() => {});

    if (e.code === 'ArrowUp') {
      e.preventDefault();
      segments = Math.min(MAX_SEG, segments + 1);
      applyVolumeFromSegments();
      updateHUD();
      showHUD();
      return;
    }

    if (e.code === 'ArrowDown') {
      e.preventDefault();
      segments = Math.max(0, segments - 1);
      applyVolumeFromSegments();
      updateHUD();
      showHUD();
      return;
    }

    if (e.repeat) return;
    if (down.has(e.code)) return;
    down.add(e.code);

    playCreamy();
  }

  function onKeyUp(e) {
    down.delete(e.code);
  }

  window.addEventListener('keydown', onKeyDown, true);
  window.addEventListener('keyup', onKeyUp, true);

  function playCreamy() {
    if (!ctx || !master) return;
    const now = ctx.currentTime;

    const noiseDur = 0.09;
    const noiseBuf = ctx.createBuffer(1, Math.floor(ctx.sampleRate * noiseDur), ctx.sampleRate);
    const data = noiseBuf.getChannelData(0);
    for (let i = 0; i < data.length; i++) {
      const env = 1 - i / data.length;
      data[i] = (Math.random() * 2 - 1) * env * 0.35;
    }
    const noise = ctx.createBufferSource();
    noise.buffer = noiseBuf;

    const lp = ctx.createBiquadFilter();
    lp.type = 'lowpass';
    lp.frequency.value = 950;

    const nGain = ctx.createGain();
    nGain.gain.setValueAtTime(0.001, now);
    nGain.gain.exponentialRampToValueAtTime(0.65, now + 0.008);
    nGain.gain.exponentialRampToValueAtTime(0.001, now + noiseDur);

    noise.connect(lp).connect(nGain).connect(master);
    noise.start(now);
    noise.stop(now + noiseDur);

    const osc = ctx.createOscillator();
    osc.type = 'sine';
    osc.frequency.setValueAtTime(120, now);
    osc.frequency.exponentialRampToValueAtTime(60, now + 0.1);

    const oGain = ctx.createGain();
    oGain.gain.setValueAtTime(0.001, now);
    oGain.gain.exponentialRampToValueAtTime(1.0, now + 0.006);
    oGain.gain.exponentialRampToValueAtTime(0.001, now + 0.16);

    osc.connect(oGain).connect(master);
    osc.start(now);
    osc.stop(now + 0.16);

    const click = ctx.createOscillator();
    click.type = 'square';
    click.frequency.value = 1800;
    const hp = ctx.createBiquadFilter();
    hp.type = 'highpass';
    hp.frequency.value = 1200;

    const cGain = ctx.createGain();
    cGain.gain.setValueAtTime(0.2, now);
    cGain.gain.exponentialRampToValueAtTime(0.001, now + 0.012);

    click.connect(hp).connect(cGain).connect(master);
    click.start(now);
    click.stop(now + 0.018);
  }

  ensureHUD();
})();
